use crate::{arch::trap::Registers, context::TaskContext, trap::TrapContext};
use core::{arch::naked_asm, mem::MaybeUninit};
use eonix_hal_traits::context::RawTaskContext;

static mut DIRTY_TASK_CONTEXT: MaybeUninit<TaskContext> = MaybeUninit::uninit();

// If captured trap context is present, we use it directly.
// We need to restore the kernel tp from that TrapContext but sp is
// fine since we will use TaskContext::switch.
#[unsafe(naked)]
pub(super) unsafe extern "C" fn _captured_trap_entry() -> ! {
    naked_asm!(
        "csrrw t0, sscratch, t0",
        "sd    tp, {tp}(t0)",
        "ld    tp, {ra}(t0)", // Load kernel tp from trap_ctx.ra
        "sd    ra, {ra}(t0)",
        "ld    ra, {sp}(t0)", // Load capturer task context from trap_ctx.sp
        "sd    sp, {sp}(t0)",
        "sd    gp, {gp}(t0)",
        "sd    a0, {a0}(t0)",
        "sd    a1, {a1}(t0)",
        "sd    a2, {a2}(t0)",
        "sd    a3, {a3}(t0)",
        "sd    a4, {a4}(t0)",
        "sd    t1, {t1}(t0)",
        "sd    a5, {a5}(t0)",
        "sd    a6, {a6}(t0)",
        "sd    a7, {a7}(t0)",
        "sd    t3, {t3}(t0)",
        "sd    t4, {t4}(t0)",
        "sd    t5, {t5}(t0)",
        "sd    t2, {t2}(t0)",
        "sd    t6, {t6}(t0)",
        "sd    s0, {s0}(t0)",
        "sd    s1, {s1}(t0)",
        "sd    s2, {s2}(t0)",
        "sd    s3, {s3}(t0)",
        "sd    s4, {s4}(t0)",
        "sd    s5, {s5}(t0)",
        "sd    s6, {s6}(t0)",
        "sd    s7, {s7}(t0)",
        "sd    s8, {s8}(t0)",
        "sd    s9, {s9}(t0)",
        "sd    s10, {s10}(t0)",
        "sd    s11, {s11}(t0)",
        "csrr  t2, sstatus",
        "csrr  t3, sepc",
        "csrr  t4, scause",
        "csrr  t5, stval",
        "csrrw t6, sscratch, t0",
        "sd    t6, {t0}(t0)",
        "sd    t2, {sstatus}(t0)",
        "sd    t3, {sepc}(t0)",
        "sd    t4, {scause}(t0)",
        "sd    t5, {stval}(t0)",
        "la    a0, {dirty_task_context}",
        "mv    a1, ra",
        "j     {task_context_switch}",
        ra = const Registers::OFFSET_RA,
        sp = const Registers::OFFSET_SP,
        gp = const Registers::OFFSET_GP,
        tp = const Registers::OFFSET_TP,
        t1 = const Registers::OFFSET_T1,
        t2 = const Registers::OFFSET_T2,
        t0 = const Registers::OFFSET_T0,
        a0 = const Registers::OFFSET_A0,
        a1 = const Registers::OFFSET_A1,
        a2 = const Registers::OFFSET_A2,
        a3 = const Registers::OFFSET_A3,
        a4 = const Registers::OFFSET_A4,
        a5 = const Registers::OFFSET_A5,
        a6 = const Registers::OFFSET_A6,
        a7 = const Registers::OFFSET_A7,
        t3 = const Registers::OFFSET_T3,
        t4 = const Registers::OFFSET_T4,
        t5 = const Registers::OFFSET_T5,
        t6 = const Registers::OFFSET_T6,
        s0 = const Registers::OFFSET_S0,
        s1 = const Registers::OFFSET_S1,
        s2 = const Registers::OFFSET_S2,
        s3 = const Registers::OFFSET_S3,
        s4 = const Registers::OFFSET_S4,
        s5 = const Registers::OFFSET_S5,
        s6 = const Registers::OFFSET_S6,
        s7 = const Registers::OFFSET_S7,
        s8 = const Registers::OFFSET_S8,
        s9 = const Registers::OFFSET_S9,
        s10 = const Registers::OFFSET_S10,
        s11 = const Registers::OFFSET_S11,
        sstatus = const TrapContext::OFFSET_SSTATUS,
        sepc = const TrapContext::OFFSET_SEPC,
        scause = const TrapContext::OFFSET_SCAUSE,
        stval = const TrapContext::OFFSET_STVAL,
        dirty_task_context = sym DIRTY_TASK_CONTEXT,
        task_context_switch = sym TaskContext::switch,
    );
}

#[unsafe(naked)]
pub(super) unsafe extern "C" fn _captured_trap_return(ctx: &mut TrapContext) -> ! {
    naked_asm!(
        "csrr   t0,  sscratch",
        "ld     t1,  {sstatus}(t0)",
        "ld     t2,  {sepc}(t0)",
        "csrw   sstatus, t1",
        "csrw   sepc, t2",
        "mv     t4,  tp",
        "mv     t5,  sp",
        "ld     tp,  {tp}(t0)",
        "ld     ra,  {ra}(t0)",
        "ld     sp,  {sp}(t0)",
        "sd     t4,  {ra}(t0)", // Store kernel tp to trap_ctx.ra
        "sd     t5,  {sp}(t0)", // Store capturer task context to trap_ctx.sp
        "ld     gp,  {gp}(t0)",
        "ld     a0,  {a0}(t0)",
        "ld     a1,  {a1}(t0)",
        "ld     a2,  {a2}(t0)",
        "ld     a3,  {a3}(t0)",
        "ld     a4,  {a4}(t0)",
        "ld     t1,  {t1}(t0)",
        "ld     a5,  {a5}(t0)",
        "ld     a6,  {a6}(t0)",
        "ld     a7,  {a7}(t0)",
        "ld     t3,  {t3}(t0)",
        "ld     t4,  {t4}(t0)",
        "ld     t5,  {t5}(t0)",
        "ld     t2,  {t2}(t0)",
        "ld     t6,  {t6}(t0)",
        "ld     s0,  {s0}(t0)",
        "ld     s1,  {s1}(t0)",
        "ld     s2,  {s2}(t0)",
        "ld     s3,  {s3}(t0)",
        "ld     s4,  {s4}(t0)",
        "ld     s5,  {s5}(t0)",
        "ld     s6,  {s6}(t0)",
        "ld     s7,  {s7}(t0)",
        "ld     s8,  {s8}(t0)",
        "ld     s9,  {s9}(t0)",
        "ld     s10, {s10}(t0)",
        "ld     s11, {s11}(t0)",
        "ld     t0,  {t0}(t0)",
        "sret",
        ra = const Registers::OFFSET_RA,
        sp = const Registers::OFFSET_SP,
        gp = const Registers::OFFSET_GP,
        tp = const Registers::OFFSET_TP,
        t1 = const Registers::OFFSET_T1,
        t2 = const Registers::OFFSET_T2,
        t0 = const Registers::OFFSET_T0,
        a0 = const Registers::OFFSET_A0,
        a1 = const Registers::OFFSET_A1,
        a2 = const Registers::OFFSET_A2,
        a3 = const Registers::OFFSET_A3,
        a4 = const Registers::OFFSET_A4,
        a5 = const Registers::OFFSET_A5,
        a6 = const Registers::OFFSET_A6,
        a7 = const Registers::OFFSET_A7,
        t3 = const Registers::OFFSET_T3,
        t4 = const Registers::OFFSET_T4,
        t5 = const Registers::OFFSET_T5,
        t6 = const Registers::OFFSET_T6,
        s0 = const Registers::OFFSET_S0,
        s1 = const Registers::OFFSET_S1,
        s2 = const Registers::OFFSET_S2,
        s3 = const Registers::OFFSET_S3,
        s4 = const Registers::OFFSET_S4,
        s5 = const Registers::OFFSET_S5,
        s6 = const Registers::OFFSET_S6,
        s7 = const Registers::OFFSET_S7,
        s8 = const Registers::OFFSET_S8,
        s9 = const Registers::OFFSET_S9,
        s10 = const Registers::OFFSET_S10,
        s11 = const Registers::OFFSET_S11,
        sstatus = const TrapContext::OFFSET_SSTATUS,
        sepc = const TrapContext::OFFSET_SEPC,
    );
}
